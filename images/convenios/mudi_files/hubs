/*!
 * ASP.NET SignalR JavaScript Library v2.2.0
 * http://signalr.net/
 *
 * Copyright Microsoft Open Technologies, Inc. All rights reserved.
 * Licensed under the Apache 2.0
 * https://github.com/SignalR/SignalR/blob/master/LICENSE.md
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['ExtranetHub'] = this.createHubProxy('ExtranetHub'); 
        proxies['ExtranetHub'].client = { };
        proxies['ExtranetHub'].server = {
            joinDefaultContactChannels: function () {
                return proxies['ExtranetHub'].invoke.apply(proxies['ExtranetHub'], $.merge(["JoinDefaultContactChannels"], $.makeArray(arguments)));
             },

            ping: function () {
                return proxies['ExtranetHub'].invoke.apply(proxies['ExtranetHub'], $.merge(["Ping"], $.makeArray(arguments)));
             }
        };

        proxies['mainHub'] = this.createHubProxy('mainHub'); 
        proxies['mainHub'].client = { };
        proxies['mainHub'].server = {
            joinAllocationGroup: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinAllocationGroup"], $.makeArray(arguments)));
             },

            joinClientChannelGroup: function (clientNicknames) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinClientChannelGroup"], $.makeArray(arguments)));
             },

            joinJobChannelGroup: function (jobIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinJobChannelGroup"], $.makeArray(arguments)));
             },

            joinTaskOwnerChannelGroup: function (ownerUserIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinTaskOwnerChannelGroup"], $.makeArray(arguments)));
             },

            joinUserChannelGroup: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinUserChannelGroup"], $.makeArray(arguments)));
             },

            joinUserGroupChannelGroup: function (userGroupIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinUserGroupChannelGroup"], $.makeArray(arguments)));
             },

            joinUserScheduleChangeChannel: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["JoinUserScheduleChangeChannel"], $.makeArray(arguments)));
             },

            leaveAllocationGroup: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveAllocationGroup"], $.makeArray(arguments)));
             },

            leaveClientChannelGroup: function (clientNicknames) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveClientChannelGroup"], $.makeArray(arguments)));
             },

            leaveJobChannelGroup: function (jobIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveJobChannelGroup"], $.makeArray(arguments)));
             },

            leaveTaskOwnerChannelGroup: function (ownerUserIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveTaskOwnerChannelGroup"], $.makeArray(arguments)));
             },

            leaveUserChannelGroup: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveUserChannelGroup"], $.makeArray(arguments)));
             },

            leaveUserGroupChannelGroup: function (userGroupIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveUserGroupChannelGroup"], $.makeArray(arguments)));
             },

            leaveUserScheduleChangeChannel: function (userIDs) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["LeaveUserScheduleChangeChannel"], $.makeArray(arguments)));
             },

            ping: function () {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["Ping"], $.makeArray(arguments)));
             },

            sendChatMessage: function (touserid, message) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SendChatMessage"], $.makeArray(arguments)));
             },

            sendNotification: function (touserid, message) {
                return proxies['mainHub'].invoke.apply(proxies['mainHub'], $.merge(["SendNotification"], $.makeArray(arguments)));
             }
        };

        proxies['tvHub'] = this.createHubProxy('tvHub'); 
        proxies['tvHub'].client = { };
        proxies['tvHub'].server = {
            joinUserGroupChannelGroup: function (groupIDs, slug) {
                return proxies['tvHub'].invoke.apply(proxies['tvHub'], $.merge(["JoinUserGroupChannelGroup"], $.makeArray(arguments)));
             },

            leaveUserGroupChannelGroup: function (groupIDs, slug) {
                return proxies['tvHub'].invoke.apply(proxies['tvHub'], $.merge(["LeaveUserGroupChannelGroup"], $.makeArray(arguments)));
             },

            ping: function () {
                return proxies['tvHub'].invoke.apply(proxies['tvHub'], $.merge(["Ping"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));